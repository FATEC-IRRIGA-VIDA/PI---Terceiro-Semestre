package metodos_projeto;

import java.sql.SQLException;

import javax.swing.JOptionPane;

import metodos.AcessoBD;

public class TarefaDAO {

	private AcessoBD bd;
	private String men, sql;
	
	// Esatabelecendo o Construtor para a Classe TarefaDAO
	public TarefaDAO() {
		bd = new AcessoBD(); // instancia um objeto da Classe BD.
	}
	
	/**
	 * Armazena uma Tarefa no banco de dados.
	 * @param Tarefa - A Tarefa a ser gravada.
	 * @return - uma mensagem informando o resultado de uma operação.
	 */
	public String incluir(Tarefa tarefa) {
		
		// Verificação em console do recebimento das informações.
		System.out.println(tarefa.getId() + tarefa.getIdUsuario() + tarefa.getDescricao() + tarefa.getObservacao() + 
				tarefa.getDtExecucao() + tarefa.getDtPrevista() + tarefa.getTipo() + tarefa.getStatus());		
		
		//Instrução a ser executada no Banco de Dados.
		sql = "insert into TB_TAREFAS (ID_USUARIO, DESCRICAO, OBS_TAREFA, DT_REAL_TAREFA, DT_PREVISTA,"
				+ "TIPO_TAREFA, STATUS_TAREFA) values (?,?,?,?,?,?,?)";
		
		//Acessando o Banco de Dados.
		bd.getConnection();
		try {
			bd.st = bd.con.prepareStatement(sql);
			bd.st.setString(1, tarefa.getIdUsuario());
			bd.st.setString(2, tarefa.getDescricao());
			bd.st.setString(3, tarefa.getObservacao());
			bd.st.setString(4, tarefa.getDtExecucao());
			bd.st.setString(5, tarefa.getDtPrevista());
			bd.st.setString(6, tarefa.getTipo());
			bd.st.setString(7, tarefa.getStatus());
			bd.st.executeUpdate();
			men = "Tarefa inserida com sucesso!"; // Armazena uma informação pós execução.
		}
		
		catch(SQLException erro) {

			/*men = "Falha: " + erro;
			JOptionPane.showMessageDialog(null, men); // Imprimi o erro encontrado.*/

			if(erro.toString().indexOf("CHECK")>=0) {
				men = "Erro de claúsula CHECK, Favor selecionar uma opção no STATUS e/ou TIPO DE TAREFA";
			}

			else {
				men = "Falha: " + erro;
			}
		}
			
		finally {
			bd.close(); // Finaliza o Acesso ao Banco de Dados.
		}
		
		JOptionPane.showMessageDialog(null, men); // Imprimi a mensagem obtida durante a opção.
		return men;
	}
	
	/**
	 * Altera um Agendamento no banco de dados.
	 * @param Agendamento - O Agendamento a ser gravado.
	 * @return - uma mensagem informando o resultado de uma operação.
	 */
	public String alterar(Agendamento agendamento) {
		
		// Verificação em console do recebimento das informações.
		System.out.println(agendamento.getIdUsuario() + agendamento.getIdEquipamento() + agendamento.getDescricao() +
				agendamento.getTipoAgendamento() + agendamento.getDtAgendamento() + agendamento.getStatusAgendamento());		
				
				// ID_AGENDAMENTO	ID_USUARIO	ID_EQUIPAMENTO	DESCRICAO	TIPO_AGEN	DT_MARCADA_AGEND	STATUS_AGEN
				
		//Instrução a ser executada no Banco de Dados.
		sql = "update TB_AGENDAMENTOS set ID_USUARIO = ?, ID_EQUIPAMENTO = ?, DESCRICAO = ?,"
				+ " TIPO_AGEN = ?, DT_MARCADA_AGEND = ?, STATUS_AGEN = ? where ID_AGENDAMENTO = ?";
		
		//Acessando o Banco de Dados.
		bd.getConnection();
		try {
			bd.st = bd.con.prepareStatement(sql);
			bd.st.setString(1, agendamento.getIdUsuario());
			bd.st.setString(2, agendamento.getIdEquipamento());
			bd.st.setString(3, agendamento.getDescricao());
			bd.st.setString(4, agendamento.getTipoAgendamento());
			bd.st.setString(5, agendamento.getDtAgendamento());
			bd.st.setString(6, agendamento.getStatusAgendamento());
			bd.st.setString(7, agendamento.getId());
			bd.st.executeUpdate();
			men = "Agendamento Alterado com sucesso!"; // Armazena uma informação pós execução.
		}
		
		catch(SQLException erro) {
			/*men = "Falha: " + erro;
			JOptionPane.showMessageDialog(null, men); // Imprimi o erro encontrado.*/

			if(erro.toString().indexOf("CHECK")>=0) {
				men = "Erro de claúsula CHECK, Favor selecionar uma opção no STATUS e/ou TIPO DE AGENDAMENTO";
			}

			else {
				men = "Falha: " + erro;
			}
		}
			
		finally {
			bd.close(); // Finaliza o Acesso ao Banco de Dados.
		}
		
		JOptionPane.showMessageDialog(null, men); // Imprimi a mensagem obtida durante a opção.
		return men;
	}
	
	/**
	 * Exclui um Agendamento a partir de seu ID.
	 * @param Agendamento - o ID do Agendamento.
	 * @return - uma mensagem informando o resultado da operação.
	 */
	public String excluir(Agendamento agendamento) {
		
		// Verificação em console do recebimento das informações.
		System.out.println(agendamento.getId());
		
		//Instrução a ser executada no Banco de Dados.
		sql = "delete from TB_AGENDAMENTOS where ID_AGENDAMENTO = ?";
		
		bd.getConnection();
		try {
			bd.st = bd.con.prepareStatement(sql);
			bd.st.setString(1, agendamento.getId());
			int n = bd.st.executeUpdate();
			
			if (n==1) {
				men = "Agendamento excluído com sucesso!"; // Armazena uma informação pós execução.
			}
			else {
				men = "Agendamento não encontrado"; // Armazena uma informação pós execução.
			}
			
			men = "Agendamento excluído com sucesso!"; // Armazena uma informação pós execução.
		}
		
		catch(SQLException erro) {
			
			men = "Erro: " + erro; // Imprimi o erro encontrado.
			
			}
		
		finally {
			bd.close();  // Finaliza o Acesso ao Banco de Dados.
		}
		
		JOptionPane.showMessageDialog(null, men); // Imprimi a mensagem obtida durante a opção.
		return men;
	}
}
